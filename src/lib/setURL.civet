// Based on https://github.com/microsoft/TypeScript-Website/blob/acd01d880cd6ef07666a46fc1aea2060956ea6dd/packages/sandbox/src/compilerOptions.ts
// MIT licensed

import { CompilerOptions } from "typescript"
import lzstring from "lz-string"
import MonacoEditor from "@monaco-editor/react"
import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';

/** Gets a query string representation (hash + queries) */
export const createURLQueryWithCompilerOptions = (text: string, editor: monaco.editor.IEditor): string => {
  const initialOptions = new URLSearchParams(document.location.search)

  let urlParams = {} as any
  // The text of the TS/JS as the hash
  const hash = `code/${lzstring.compressToEncodedURIComponent(text)}`

  // Support sending the selection, but only if there is a selection, and it's not the whole thing
  const s = editor.getSelection()

  const isNotEmpty =
    (s && s.selectionStartLineNumber !== s.positionLineNumber) || (s && s.selectionStartColumn !== s.positionColumn)

  const range = editor.getModel()!.getFullModelRange()
  const isFull =
    s &&
    s.selectionStartLineNumber === range.startLineNumber &&
    s.selectionStartColumn === range.startColumn &&
    s.positionColumn === range.endColumn &&
    s.positionLineNumber === range.endLineNumber

  if (s && isNotEmpty && !isFull) {
    urlParams["ssl"] = s.selectionStartLineNumber
    urlParams["ssc"] = s.selectionStartColumn
    urlParams["pln"] = s.positionLineNumber
    urlParams["pc"] = s.positionColumn
  } else {
    urlParams["ssl"] = undefined
    urlParams["ssc"] = undefined
    urlParams["pln"] = undefined
    urlParams["pc"] = undefined
  }

  // if (sandbox.config.filetype !== "ts") urlParams["filetype"] = sandbox.config.filetype

  // @ts-ignore - this is in MDN but not libdom
  const hasInitialOpts = initialOptions.keys().length > 0

  if (Object.keys(urlParams).length > 0 || hasInitialOpts) {
    let queryString = Object.entries(urlParams)
      .filter(([_k, v]) => v !== undefined)
      .filter(([_k, v]) => v !== null)
      .map(([key, value]) => {
        return `${key}=${encodeURIComponent(value as string)}`
      })
      .join("&")

    // We want to keep around custom query variables, which
    // are usually used by playground plugins, with the exception
    // being the install-plugin param and any compiler options
    // which have a default value

    initialOptions.forEach((value, key) => {
      const skip = ["ssl", "ssc", "pln", "pc"]
      if (skip.includes(key)) return
      if (queryString.includes(key)) return
      if (compilerOptions[key]) return

      queryString += `&${key}=${value}`
    })

    return `?${queryString}#${hash}`
  } else {
    return `#${hash}`
  }
}
